@{
    Layout = null;
}

@using POM.Models
@model POM.Models.ListMultipleViewModel

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>PlotsOnMaps</title>
    <link rel="stylesheet" type="text/css" href="~/CSS/font-awesome.css">
    <link rel="stylesheet" type="text/css" href="~/CSS/mapas.css">
    <link rel="stylesheet" href="~/CSS/w3.css">
    <link rel="stylesheet" href="https://www.w3schools.com/lib/w3-theme-black.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script type="text/javascript" src="~/JS/jquery.js"></script>
    <script type="text/javascript" src="~/JS/function.js"></script>
    <script type="text/javascript" src="~/JS/Home.js"></script>

    <link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    @Html.DevExpress().GetStyleSheets(
       new StyleSheet { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
       new StyleSheet { ExtensionSuite = ExtensionSuite.Editors },
       new StyleSheet { ExtensionSuite = ExtensionSuite.GridView }
   )
    @Html.DevExpress().GetScripts(
        new Script { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new Script { ExtensionSuite = ExtensionSuite.Editors },
        new Script { ExtensionSuite = ExtensionSuite.GridView }
    )
</head>

<body>
    <nav class="w3-sidebar w3-bar-block w3-white w3-card w3-animate-left w3-xxlarge" style="display:none;z-index:2" id="mySidebar">
        <a href="javascript:void(0)" onclick="w3_close()" class="w3-bar-item w3-button w3-display-topright w3-text-teal">
            Close
            <i class="fa fa-remove"></i>
        </a>
        <a href="#" class="w3-bar-item w3-button">Link 1</a>
        <a href="#" class="w3-bar-item w3-button">Link 2</a>
        <a href="#" class="w3-bar-item w3-button">Link 3</a>
        <a href="#" class="w3-bar-item w3-button">Link 4</a>
        <a href="#" class="w3-bar-item w3-button">Link 5</a>
    </nav>

    <!-- Navbar -->
    <div class="w3-top">
        <div class="w3-bar w3-theme-d2 w3-left-align">
            <a class="w3-bar-item w3-button w3-hide-medium w3-hide-large w3-right w3-hover-white w3-theme-d2" href="javascript:void(0);" onclick="openNav()"><i class="fa fa-bars"></i></a>
            <a href="/POM/Home" class="w3-bar-item w3-button w3-teal"><i class="fa fa-home w3-margin-right"></i>PlotsOnMaps</a>
            <a href="/POM/Parcelas" class="w3-bar-item w3-button w3-hide-small w3-hover-white">Fincas y Parcelas</a>

            <div class="w3-dropdown-hover w3-hide-small">
                <button class="w3-button" title="Notifications">Otros <i class="fa fa-caret-down"></i></button>
                <div class="w3-dropdown-content w3-card-4 w3-bar-block">
                    <a href="/POM/Usuarios" class="w3-bar-item w3-button">Usuarios</a>
                    <a href="/POM/Variedades" class="w3-bar-item w3-button">Variedades</a>
                    <a href="/POM/Articulos" class="w3-bar-item w3-button">Artículos</a>
                    <a href="/POM/Operaciones" class="w3-bar-item w3-button">Operaciones</a>
                </div>
            </div>

            <a href="/POM/Filtrado" class="w3-bar-item w3-button w3-hide-small w3-hover-teal" title="Filtrar Operaciones"><i class="fa fa-search"></i></a>
            <a href="/POM/Login" class="w3-bar-item w3-button w3-hide-small w3-right w3-hover-white">Cerrar Sesión</a>
        </div>

        <!-- Navbar on small screens -->
        <div id="navDemo" class="w3-bar-block w3-theme-d2 w3-hide w3-hide-large w3-hide-medium">
            <a href="/POM/Parcelas" class="w3-bar-item w3-button">Parcelas</a>
            <a href="/POM/Otros" class="w3-bar-item w3-button">Otros</a>
            <a href="/POM/Login" class="w3-bar-item w3-button">Cerrar Sesión</a>
        </div>
    </div>


    <input id="pac-input" class="controls" type="text" placeholder="Buscar en Google Maps" style="visibility:hidden">
    <div id="map"></div>


    <form class="login-form" id="formfiltrarparcela">

        <h3 id="formFiltrar" style="font-size: 30px;"> Filtrar Operaciones </h3>

        <input class="filtrar" id="aplicarFiltro" type="button" value="Recargar Mapa" />

        <script type="text/javascript">
            $(function () {
                $("body").on("click", "#aplicarFiltro", function () {
                    var filtro = {};
                    
                    $.ajax({
                        type: "POST",
                        url: "/POM/ObtenerFiltrado",
                        data: JSON.stringify(filtro),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (data) {
                            console.log("entra");
                            initMap2(data);
                        },
                        error: function (xhr, status, error) { alert("Fallo en la operación"); }
                    });
                });
            });

        </script>

        @Html.Action("GridViewPartialFiltrado")





        <!--<div id="dataTable_wrapper"></div>
    <table id="dataTable" class="w3-table table-striped">
        <thead>
            <tr>
                <th> CODIGO </th>
                <th> NOMBRE </th>
                <th> COLOR </th>
                <th> TIPO DE OPERACIÓN </th>
                <th> FECHA </th>
                <th> ARTICULOS </th>
                <th> OBSERVACIONES </th>
                <th> PARCELA </th>
                <th> FINCA </th>
                <th> USUARIO </th>
            </tr>
        </thead>
        <tbody id="SetOperaciones">
            <tr id="LoadingStatus" style="color:red"></tr>
        </tbody>
    </table>-->
    </form>


        <br /> <br />
    <script>

        var map, infowindow;

        function createInfoWindow(poly, content) {

            google.maps.event.addListener(poly, 'click', function (event) {
                // infowindow.content = content;
                infowindow.setContent(content);

                // infowindow.position = event.latLng;
                infowindow.setPosition(event.latLng);
                infowindow.open(map);
            });
        }

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 37.2547837, lng: -6.9536343 },
                zoom: 12
            });

            infowindow = new google.maps.InfoWindow();

            var arr = new Array();

            var parcelas = @Html.Raw(Json.Encode(ViewBag.PomsParcelas));
            var coordenadasparcelas = @Html.Raw(Json.Encode(ViewBag.Poms));
            var coordenadasoperaciones = @Html.Raw(Json.Encode(ViewBag.PomsOP));
            var nDibujosOperaciones = @Html.Raw(Json.Encode(ViewBag.PomsNDibujos));
            var operaciones = @Html.Raw(Json.Encode(ViewBag.PomsOperaciones));

            /*$("#SetOperaciones").html(" ");
            var SetData = $("#SetOperaciones");
            for (var i = 0; i < operaciones.length; i++) {
                console.log(operaciones[i]);
                var Data = "<tr class='row_" + operaciones[i].codigo + "'>" +
                    "<td>" + operaciones[i].codigo + "</td>" +
                    "<td>" + operaciones[i].nombre + "</td>" +
                    "<td>" + operaciones[i].color + "</td>" +
                    "<td>" + operaciones[i].tipo + "</td>" +
                    "<td>" + operaciones[i].fecha + "</td>" +
                    "<td>" + operaciones[i].articulos + "</td>" +
                    "<td>" + operaciones[i].observaciones + "</td>" +
                    "<td>" + operaciones[i].parcela + "</td>" +
                    "<td>" + operaciones[i].finca + "</td>" +
                    "<td>" + operaciones[i].usuario + "</td>" +
                    "</tr>";
                SetData.append(Data);
                $("#LoadingStatus").html(" ");
                SetData.removeData();
            }

            console.log(coordenadasparcelas);
            console.log(coordenadasoperaciones);
            console.log(nDibujosOperaciones);
            console.log(operaciones);*/
            //var operaciones = ViewData["Operaciones"];

            var polylinesDB = [];
            var polylinesOPDB = [];

            for (var i in coordenadasparcelas) {
                arr = [];
                for (var j = 0; j < coordenadasparcelas[i].length; j++) {
                    arr.push(new google.maps.LatLng(
                        parseFloat(coordenadasparcelas[i][j].latitud),
                        parseFloat(coordenadasparcelas[i][j].longitud)
                    ));
                }

                polylinesDB.push(new google.maps.Polyline({
                    path: arr,
                    geodesic: true,
                    strokeColor: coordenadasparcelas[i][j-1].colorHex,
                    strokeOpacity: 1.0,
                    strokeWeight: 5,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35
                }));

                for (var i in polylinesDB) {
                    createInfoWindow(polylinesDB[i], "Finca: " + parcelas[i].finca + " - Parcela: " + parcelas[i].nombre);
                    polylinesDB[i].setMap(map);
                }

            }

            var arrLL = [];
            for (var i = 0; i < coordenadasoperaciones.length; i++) {
                arrLL = [];
                var j = 0;
                var k = 0;
                var partir = false;
                while (k < nDibujosOperaciones[i]) {
                    arrLL = [];
                    while (j < coordenadasoperaciones[i].length && partir == false) {

                        var trozoOp = coordenadasoperaciones[i][j].trozo;
                        if (k == trozoOp) {
                            arrLL.push(new google.maps.LatLng(
                                parseFloat(coordenadasoperaciones[i][j].latitud),
                                parseFloat(coordenadasoperaciones[i][j].longitud)
                            ));

                        }
                        else {
                            console.log(coordenadasoperaciones[i][j - 1].colorHex)
                            var polys = new google.maps.Polyline({
                                path: arrLL,
                                strokeColor: coordenadasoperaciones[i][j-1].colorHex,
                                strokeOpacity: 1.0,
                                strokeWeight: 5,
                                fillOpacity: 0.35,
                            });
                            
                            createInfoWindow(polys, "Operación: " + operaciones[i].NOMBRE);
                            polys.setMap(map);
                            partir = true;
                        }
                        j++;
                    }

                    if (j == coordenadasoperaciones[i].length) {
                        var polys = new google.maps.Polyline({
                            path: arrLL,
                            strokeColor: coordenadasoperaciones[i][j - 1].colorHex,
                            strokeOpacity: 1.0,
                            strokeWeight: 5,
                            fillOpacity: 0.35,
                        });
                        
                        createInfoWindow(polys, "Operación: " + operaciones[i].NOMBRE);
                        polys.setMap(map);
                    }

                    k++;
                    partir = false;
                }
            }

            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }

        function initMap2(data) {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 37.2547837, lng: -6.9536343 },
                zoom: 12
            });

            infowindow = new google.maps.InfoWindow();

            var arr = new Array();

            var parcelas = @Html.Raw(Json.Encode(ViewBag.PomsParcelas));
            var coordenadasparcelas = @Html.Raw(Json.Encode(ViewBag.Poms));
            var coordenadasoperaciones = data.coordenadas;
            var nDibujosOperaciones = data.nDibujos;
            var operaciones = data.operaciones;

            var polylinesDB = [];

            for (var i in coordenadasparcelas) {
                arr = [];
                for (var j = 0; j < coordenadasparcelas[i].length; j++) {
                    arr.push(new google.maps.LatLng(
                        parseFloat(coordenadasparcelas[i][j].latitud),
                        parseFloat(coordenadasparcelas[i][j].longitud)
                    ));
                }

                polylinesDB.push(new google.maps.Polyline({
                    path: arr,
                    geodesic: true,
                    strokeColor: coordenadasparcelas[i][j-1].colorHex,
                    strokeOpacity: 1.0,
                    strokeWeight: 5,
                    fillColor: coordenadasparcelas[i][j-1].colorHex,
                    fillOpacity: 0.35
                }));

                for (var i in polylinesDB) {
                    createInfoWindow(polylinesDB[i], "Finca: " + parcelas[i].finca + " - Parcela: " + parcelas[i].nombre);
                    polylinesDB[i].setMap(map);
                }
            }

            var arrLL = [];
            for (var i = 0; i < coordenadasoperaciones.length; i++) {
                arrLL = [];
                var j = 0;
                var k = 0;
                var partir = false;
                while (k < nDibujosOperaciones[i]) {
                    arrLL = [];
                    while (j < coordenadasoperaciones[i].length && partir == false) {

                        var trozoOp = coordenadasoperaciones[i][j].trozo;
                        if (k == trozoOp) {
                            arrLL.push(new google.maps.LatLng(
                                parseFloat(coordenadasoperaciones[i][j].latitud),
                                parseFloat(coordenadasoperaciones[i][j].longitud)
                            ));

                        }
                        else {
                            var polys = new google.maps.Polyline({
                                path: arrLL,
                                strokeColor: coordenadasoperaciones[i][j-1].colorHex,
                                strokeOpacity: 1.0,
                                strokeWeight: 5,
                                fillColor: coordenadasoperaciones[i][j-1].colorHex,
                                fillOpacity: 0.35,
                            });

                            createInfoWindow(polys, "Operación: " + operaciones[i].NOMBRE);
                            polys.setMap(map);
                            partir = true;
                        }
                        j++;
                    }

                    if (j == coordenadasoperaciones[i].length) {
                        var polys = new google.maps.Polyline({
                            path: arrLL,
                            strokeColor: coordenadasoperaciones[i][j - 1].colorHex,
                            strokeOpacity: 1.0,
                            strokeWeight: 5,
                            fillColor: coordenadasoperaciones[i][j - 1].colorHex,
                            fillOpacity: 0.35,
                        });

                        createInfoWindow(polys, "Operación: " + operaciones[i].NOMBRE);
                        polys.setMap(map);
                    }

                    k++;
                    partir = false;
                }
            }

            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }
        google.maps.event.addDomListener(window, "load", initMap);
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBu6Bjk8hJSQLCnzB8XBwZrJd2Zoms86j4&language=es&region=ES&libraries=places&callback=initMap" async defer></script>

    <footer class="w3-container w3-padding-32 w3-theme-d1 w3-center foot">
        <p> © 2018 PlotsOnMaps - Rubén González Membrilla </p>
    </footer>

    <script>
        function myMap() {
            myCenter = new google.maps.LatLng(41.878114, -87.629798);
            var mapOptions = {
                center: myCenter,
                zoom: 12, scrollwheel: false, draggable: false,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            var map = new google.maps.Map(document.getElementById("googleMap"), mapOptions);

            var marker = new google.maps.Marker({
                position: myCenter,
            });
            marker.setMap(map);
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBu6Bjk8hJSQLCnzB8XBwZrJd2Zoms86j4&callback=myMap" />
    </script>
</body>
</html>
